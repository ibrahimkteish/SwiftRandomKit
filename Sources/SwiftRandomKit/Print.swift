extension RandomGenerators {
    /// A generator that prints the generated value to the console before returning it.
    ///
    /// This generator is useful for debugging and logging purposes. It wraps another generator,
    /// prints the generated value with an optional prefix, and then returns the value unchanged.
    ///
    /// Example usage:
    /// ```swift
    /// // Print dice rolls with a prefix
    /// let debugDice = IntGenerator(in: 1...6).print("Dice roll")
    /// let roll = debugDice.run() 
    /// // Prints: "Dice roll: 4" to the console
    /// // roll = 4
    ///
    /// // Chain with other generators
    /// let debugCoordinates = IntGenerator(in: 0...100).tuple().print("Coordinates")
    /// let coords = debugCoordinates.run()
    /// // Prints: "Coordinates: (42, 73)" to the console
    /// // coords = (42, 73)
    /// ```
    public struct Print<Upstream: RandomGenerator>: RandomGenerator {
        public typealias Element = Upstream.Element

        /// The upstream generator providing values.
        public let generator: Upstream
        
        /// The prefix to print before the generated value.
        public let prefix: String

        /// Initializes a new print generator with the given upstream generator and prefix.
        /// - Parameters:
        ///   - generator: The upstream generator to get values from.
        ///   - prefix: A string to print before the generated value.
        public init(_ generator: Upstream, prefix: String) {
            self.generator = generator
            self.prefix = prefix
        }

        /// Runs the generator using the provided random number generator.
        /// - Parameter rng: The random number generator to use.
        /// - Returns: The value generated by the upstream generator, after printing it to the console.
        @inlinable
        public func run<RNG: RandomNumberGenerator>(using rng: inout RNG) -> Element {
            let value = generator.run(using: &rng)
            Swift.print("\(prefix): \(value)")
            return value
        }
    }
}

extension RandomGenerator {
    /// Creates a generator that prints the generated value to the console before returning it.
    ///
    /// This method is useful for debugging random generation chains without modifying the actual values.
    ///
    /// - Parameter prefix: A string to print before the generated value.
    /// - Returns: A generator that prints and then returns the generated value.
    @inlinable
    public func print(_ prefix: String) -> RandomGenerators.Print<Self> {
        .init(self, prefix: prefix)
    }
}
