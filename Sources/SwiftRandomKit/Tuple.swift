extension RandomGenerators {
    /// A random generator that produces a tuple of two elements generated by the upstream generator.
    ///
    /// Example usage:
    /// ```swift
    /// // Create a generator for random integers between 1 and 6 (dice)
    /// let diceGen = IntGenerator(1...6)
    /// 
    /// // Create a tuple generator to roll two dice at once
    /// let twoDice = diceGen.tuple()
    /// 
    /// // Roll the dice
    /// let (die1, die2) = twoDice.run() // e.g., (4, 6)
    /// 
    /// // You can also chain it directly:
    /// let coordinates = IntGenerator(0...100).tuple().run() // e.g., (42, 73)
    /// ```
    public struct Tuple<Upstream: RandomGenerator>: RandomGenerator {
        let upstream: Upstream

        /// Initializes a new tuple generator with the given upstream generator.
        /// - Parameter upstream: The upstream generator to use for generating tuple elements.
        public init(_ upstream: Upstream) {
            self.upstream = upstream
        }

        /// Runs the generator using the provided random number generator.
        /// - Parameter rng: The random number generator to use.
        /// - Returns: A tuple containing two elements generated by the upstream generator.
        public func run<RNG: RandomNumberGenerator>(using rng: inout RNG) -> (Upstream.Element, Upstream.Element) {
            (upstream.run(using: &rng), upstream.run(using: &rng))
        }
    }
}

extension RandomGenerator {
    /// Creates a tuple generator from the current generator.
    /// - Returns: A tuple generator that produces pairs of elements from the current generator.
    @inlinable
    public func tuple() -> RandomGenerators.Tuple<Self> {
        .init(self)
    }
}
