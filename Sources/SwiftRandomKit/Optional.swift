extension RandomGenerators {
    /// A generator that wraps the output of another generator in an Optional type.
    ///
    /// This generator is useful when you need to work with optional values in your random generation pipeline.
    /// It takes an upstream generator and wraps its output in `Optional<T>`.
    ///
    /// Example usage:
    /// ```swift
    /// // Create an optional integer generator
    /// let optionalDice = IntGenerator(in: 1...6).optional()
    /// let roll = optionalDice.run() // Optional(4)
    ///
    /// // Use in a chain with other generators
    /// let optionalCoordinates = IntGenerator(in: 0...100).tuple().optional()
    /// let coords = optionalCoordinates.run() // Optional((42, 73))
    /// ```
    public struct OptionalGenerator<R: RandomGenerator>: RandomGenerator {
        /// The type of elements produced by this generator.
        public typealias Element = Optional<R.Element>
        
        /// The upstream generator providing values to be wrapped in Optional.
        private let generator: R

        /// Initializes a new optional generator with the given upstream generator.
        /// - Parameter generator: The upstream generator to wrap values from.
        public init(_ generator: R) {
            self.generator = generator
        }

        /// Runs the generator using the provided random number generator.
        /// - Parameter rng: The random number generator to use.
        /// - Returns: The value generated by the upstream generator, wrapped in Optional.
        public func run<RNG: RandomNumberGenerator>(using rng: inout RNG) -> Element {
            generator.run(using: &rng)
        }
    }
}

extension RandomGenerator {
    /// Creates a generator that wraps the output in an Optional type.
    ///
    /// This method is useful when you need to integrate with code that expects optional values.
    ///
    /// - Returns: A generator that produces optional values.
    @inline(__always)
    public func optional() -> RandomGenerators.OptionalGenerator<Self> {
        .init(self)
    }
}
