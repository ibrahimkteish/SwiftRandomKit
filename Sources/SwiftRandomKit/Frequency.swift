extension RandomGenerators {
    /// A generator that selects from multiple generators with different frequencies.
    ///
    /// The `Frequency` generator allows you to create weighted random selections by specifying
    /// how frequently each generator should be chosen. Generators with higher frequency values
    /// will be selected more often than those with lower values.
    ///
    /// Example usage:
    /// ```swift
    /// // Create dice with different weights
    /// // A 6-sided die that appears 3 times more often than a 20-sided die
    /// let d1 = IntGenerator(in: 1...3)
    /// let d2 = IntGenerator(in: 4...6)
    /// 
    /// let weightedDice = d1.frequency([
    ///     (3, d1),   // 3x weight for d1
    ///     (1, d2)   // 1x weight for d2
    /// ])
    /// 
    /// // Roll the weighted dice - 75% chance of d1, 25% chance of d2
    /// let roll = weightedDice.run() // Likely to be 1-3 (75% chance)
    /// ```
    public struct Frequency<Upstream: RandomGenerator>: RandomGenerator {
        /// The type of elements produced by this generator.
        public typealias Element = Upstream.Element
        
        /// The distribution of generators with their frequencies.
        let distribution: [(Int, Upstream)]
        
        /// Initializes a new frequency generator with the given distribution.
        /// - Parameter distribution: An array of tuples where each tuple contains a frequency (weight)
        ///   and a generator. Generators with higher frequency values will be selected more often.
        public init(_ distribution: [(Int, Upstream)]) {
            self.distribution = distribution
        }

        /// Runs the generator using the provided random number generator.
        /// - Parameter rng: The random number generator to use.
        /// - Returns: A value generated by one of the upstream generators, selected according to the frequency distribution.
        public func run<RNG: RandomNumberGenerator>(using rng: inout RNG) -> Upstream.Element {
            let generators = distribution.flatMap { (freq, gen) in 
                [Upstream](repeating: gen, count: freq)
            }
            return IntGenerator(in: 0..<generators.count)
                .flatMap { idx in generators[idx] }
                .run(using: &rng)
        }
    }
}

public extension RandomGenerator {
    /// Creates a generator that selects from multiple generators with different frequencies.
    ///
    /// This method allows you to create weighted random selections by specifying how frequently
    /// each generator should be chosen. The frequency values determine the relative probability
    /// of each generator being selected.
    ///
    /// - Parameter distribution: An array of tuples where each tuple contains a frequency (weight)
    ///   and a generator. Generators with higher frequency values will be selected more often.
    /// - Returns: A generator that produces values from the weighted selection of generators.
    func frequency(_ distribution: [(Int, Self)]) -> RandomGenerators.Frequency<Self> {
        .init(distribution)
    }
}